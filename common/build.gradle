plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'pers.fz.mvvm'
    compileSdk libs.versions.compileSdkVersion.get().toInteger()
    defaultConfig {
        minSdk = libs.versions.minSdkVersion.get().toInteger()
        targetSdk = libs.versions.targetSdkVersion.get().toInteger()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', 'armeabi-v8a', 'x86'
//            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a',
//                    'x86', 'x86_64', 'mips', 'mips64'
        }
        //加载项目build.gradle的anroid标签下
        dataBinding {
            enabled = true
        }
    }

    buildTypes {
        release {
            resValue "string", "app_config_file", "prod.properties"
            buildConfigField "boolean", "LOG_DEBUG", "false"// 不显示log
            minifyEnabled false// 混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //新版混淆添加以下代码：，如果只添加上面会导致混淆规则一直无效；
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            resValue "string", "app_config_file", "dev.properties"
            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示log
            minifyEnabled false// 混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        encoding "UTF-8"
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation platform(libs.kotlin.bom)
    implementation libs.activity
    implementation libs.androidx.core.ktx
    implementation libs.lifecycle.runtime.ktx
    implementation libs.androidx.appcompat
    implementation libs.viewpager2
    implementation libs.material
    implementation libs.graphics
    implementation libs.net.res
    implementation libs.net.ui
    implementation libs.constraintlayout
    implementation libs.logger
    implementation libs.androidx.recyclerview
    implementation libs.gson
    implementation libs.github.glide
    implementation libs.okhttp
    implementation libs.retrofit
    implementation libs.reactivex.rxandroid
    implementation libs.rxjava3.rxjava
    //ConverterFactory的String依赖包
    implementation libs.retrofit2.converter.scalars
    //ConverterFactory的Gson依赖包
    implementation libs.retrofit2.converter.gson
    //CallAdapterFactory的Rx依赖包
    implementation libs.retrofit2.adapter.rxjava3
    //SmartRefreshLayout集成
    implementation libs.scwang90.refresh.layout.kernel
    implementation libs.refresh.header.classics
    implementation libs.refresh.footer.classics
    implementation libs.geyifeng.immersionbar

    implementation libs.androidx.lifecycle.lifecycle.extensions
    //放着没有及时回收造成RxJava内存泄漏
    implementation libs.com.trello.rxlifecycle2.rxlifecycle.components
    //是否需要ExoPlayer模式
    implementation libs.gsyvideoplayer
    //根据你的需求ijk模式的so
    implementation libs.gsyvideoplayer.arm64
    implementation libs.gsyvideoplayer.armv7a
    implementation libs.github.gsyvideoplayer.x86
    implementation libs.github.gsyvideoplayer.x64
    implementation libs.mmkv
    //MinIO只有Java版本不兼容Android，因此使用这两个包代替
    implementation libs.amazonaws.aws.android.sdk.s3
    implementation libs.amazonaws.aws.android.sdk.mobile.client

    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.androidx.navigation.ui.ktx
    //每个用到的模块都要加这两个，不能使用api
    implementation libs.google.hilt.android
    kapt libs.google.hilt.android.compiler

    implementation libs.core
    //noinspection GradleDependency
    implementation libs.zxing.android.embedded
    //paging3
    implementation libs.androidx.paging.runtime
    // 用于测试
    testImplementation libs.androidx.paging.common
// [可选] RxJava 支持
    implementation libs.paging.rxjava3
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx
    implementation libs.androidx.paging.runtime.ktx
    implementation libs.kotlinx.coroutines.core

    //下拉刷新
    implementation libs.swiperefreshlayout

    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.runtime
    kapt libs.room.compiler
    // optional - RxJava3 support for Room
    implementation libs.room.rxjava3
    // optional - Paging 3 Integration
    implementation libs.room.paging

    implementation libs.bouncycastle.bcprov
}

apply plugin: 'maven-publish'

// 任务注册：生成源代码 JAR
tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set("sources") // 设置 classifier 为 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar // 将源码 JAR 添加到 artifacts
}

afterEvaluate {
    publishing {
        publications {
            plugin(MavenPublication) {
                // 发布源码 JAR，确保 classifier 为 'sources'，并且 extension 为 'jar'
                artifact(androidSourcesJar)
                artifact("$buildDir/outputs/aar/${artifactId}-release.aar")
                groupId = 'pers.fz.mvvm'
                artifactId = 'common'
                version = '2.4.0'
            }
        }

        // 配置发布仓库
        repositories {
            maven {
                url = 'https://packages.aliyun.com/maven/repository/2405978-release-ObRSGq/'
                credentials {
                    username = System.getenv("ALIYUN_USER_NAME")
                    password = System.getenv("ALIYUN_PASSWORD")
                }
            }
            maven {
                url = 'https://packages.aliyun.com/maven/repository/2405978-snapshot-rT6GM2/'
                credentials {
                    username = System.getenv("ALIYUN_USER_NAME")
                    password = System.getenv("ALIYUN_PASSWORD")
                }
            }
        }
    }
}

