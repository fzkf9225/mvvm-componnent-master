plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

android {
    compileSdk project.COMPILE_SDK_VERSION
    namespace 'pers.fz.mvvm'
    defaultConfig {
        minSdk project.MIN_SDK_VERSION
        targetSdk project.TARGET_SDK_VERSION
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["foo": "bar"]
            }
        }
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', 'armeabi-v8a', 'x86'
//            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a',
//                    'x86', 'x86_64', 'mips', 'mips64'
        }
        //加载项目build.gradle的anroid标签下
        dataBinding {
            enabled = true
        }
    }

    buildTypes {
        release {
            resValue "string", "app_config_file", "prod.properties"
            buildConfigField "boolean", "LOG_DEBUG", "false"// 不显示log
            minifyEnabled false// 混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //新版混淆添加以下代码：，如果只添加上面会导致混淆规则一直无效；
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            resValue "string", "app_config_file", "dev.properties"
            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示log
            minifyEnabled false// 混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    dataBinding{
        enabled = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation platform("org.jetbrains.kotlin:kotlin-bom:$kotlinBomVersion")
    implementation "androidx.activity:activity:$activityVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleRuntimeKtxVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.viewpager2:viewpager2:￥viewpager2Version"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "net.qiujuer.genius:graphics:$geniusVersion"
    implementation "net.qiujuer.genius:res:$geniusVersion"
    implementation "net.qiujuer.genius:ui:$geniusVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"
    implementation "com.orhanobut:logger:$loggerVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxandroidVersion"
    implementation "io.reactivex.rxjava3:rxjava:$rxjavaVersion"
    //ConverterFactory的String依赖包
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    //ConverterFactory的Gson依赖包
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    //CallAdapterFactory的Rx依赖包
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"
    //SmartRefreshLayout集成
    implementation "io.github.scwang90:refresh-layout-kernel:$refresh_layout_version"
    implementation "io.github.scwang90:refresh-header-classics:$refresh_layout_version"
    implementation "io.github.scwang90:refresh-footer-classics:$refresh_layout_version"
    implementation "com.geyifeng.immersionbar:immersionbar:$immersionbarVersion"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    //放着没有及时回收造成RxJava内存泄漏
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:$rxlifecycleVersion"
    //是否需要ExoPlayer模式
    implementation "com.github.CarGuo.GSYVideoPlayer:GSYVideoPlayer:$gsy_version"
    //根据你的需求ijk模式的so
    implementation "com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-arm64:$gsy_version"
    implementation "com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-armv7a:$gsy_version"
    implementation "com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-x86:$gsy_version"
    implementation "com.github.CarGuo.GSYVideoPlayer:gsyVideoPlayer-x64:$gsy_version"
    implementation "com.tencent:mmkv:$mmkvVersion"
    //MinIO只有Java版本不兼容Android，因此使用这两个包代替
    implementation "com.amazonaws:aws-android-sdk-s3:$awsAndroidSdkVersion"
    implementation "com.amazonaws:aws-android-sdk-mobile-client:$awsAndroidSdkVersion"
    implementation "io.github.jeremyliao:live-event-bus-x:$liveEventBusVersion"

    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"
    //每个用到的模块都要加这两个，不能使用api
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    annotationProcessor "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation "com.google.zxing:core:$zxingCoreVersion"
    //noinspection GradleDependency
    implementation "com.journeyapps:zxing-android-embedded:$zxingAndroidVersion"
    //paging3
    implementation "androidx.paging:paging-runtime:$pagingVersion"
    // 用于测试
    testImplementation "androidx.paging:paging-common:$pagingVersion"
// [可选] RxJava 支持
    implementation "androidx.paging:paging-rxjava3:$pagingVersion"
    //下拉刷新
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayoutVersion"
}
//执行以下命令完成制品推送
//推送命令
//gradle publish
//# 如果你的项目使用了gradle wrapper组件的话请使用以下命令
//# ./gradlew publish
apply plugin: 'maven-publish'
afterEvaluate {
    publishing {
        publications {
            plugin(MavenPublication) {
                artifact("$buildDir/outputs/aar/${artifactId}-release.aar")
                groupId = 'pers.fz.mvvm'
                artifactId = 'common'
                version = '1.3.8'
            }
        }
        repositories {
            maven {
                url = 'https://packages.aliyun.com/maven/repository/2405978-release-ObRSGq/'
                credentials {
                    username = System.getenv("ALIYUN_USER_NAME")
                    password = System.getenv("ALIYUN_PASSWORD")
                }
            }
            maven {
                url = 'https://packages.aliyun.com/maven/repository/2405978-snapshot-rT6GM2/'
                credentials {
                    username = System.getenv("ALIYUN_USER_NAME")
                    password = System.getenv("ALIYUN_PASSWORD")
                }
            }
        }
    }
}