plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.casic.titan.commonui'
    compileSdk libs.versions.compileSdkVersion.get().toInteger()
    defaultConfig {
        minSdk = libs.versions.minSdkVersion.get().toInteger()
        targetSdk = libs.versions.targetSdkVersion.get().toInteger()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi-v7a', 'armeabi-v8a', 'x86'
//            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a',
//                    'x86', 'x86_64', 'mips', 'mips64'
        }
        //加载项目build.gradle的anroid标签下
        dataBinding {
            enabled = true
        }
    }

    buildTypes {
        release {
            resValue "string", "app_config_file", "prod.properties"
            buildConfigField "boolean", "LOG_DEBUG", "false"// 不显示log
            minifyEnabled false// 混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //新版混淆添加以下代码：，如果只添加上面会导致混淆规则一直无效；
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            resValue "string", "app_config_file", "dev.properties"
            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示log
            minifyEnabled false// 混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_17
        sourceCompatibility JavaVersion.VERSION_17
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    dataBinding{
        enabled = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation libs.androidx.core.ktx
    implementation platform(libs.kotlin.bom)
    implementation libs.androidx.appcompat
    implementation libs.viewpager2
    implementation libs.material
    implementation libs.constraintlayout
    implementation libs.androidx.recyclerview
    implementation libs.androidPicker.common
    implementation libs.androidpicker.wheelpicker
    implementation libs.calendarpicker
    implementation libs.github.wheelview
    implementation libs.github.glide
    implementation project(':common')
    implementation project(':commonmedia')
}

//执行以下命令完成制品推送
//推送命令
//gradle publish
//# 如果你的项目使用了gradle wrapper组件的话请使用以下命令
//# ./gradlew publish
apply plugin: 'maven-publish'
afterEvaluate {
    publishing {
        publications {
            plugin(MavenPublication) {
                artifact("$buildDir/outputs/aar/${artifactId}-release.aar")
                groupId = 'com.casic.titan.commonui'
                artifactId = 'commonui'
                version = '1.2.0'
            }
        }
        repositories {
            maven {
                url = 'https://packages.aliyun.com/maven/repository/2405978-release-ObRSGq/'
                credentials {
                    username = System.getenv("ALIYUN_USER_NAME")
                    password = System.getenv("ALIYUN_PASSWORD")
                }
            }
            maven {
                url = 'https://packages.aliyun.com/maven/repository/2405978-snapshot-rT6GM2/'
                credentials {
                    username = System.getenv("ALIYUN_USER_NAME")
                    password = System.getenv("ALIYUN_PASSWORD")
                }
            }
        }
    }
}